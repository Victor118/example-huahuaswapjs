import * as _111 from "./liquidity/v1beta1/genesis";
import * as _112 from "./liquidity/v1beta1/liquidity";
import * as _113 from "./liquidity/v1beta1/query";
import * as _114 from "./liquidity/v1beta1/tx";
import * as _198 from "./liquidity/v1beta1/query.lcd";
import * as _199 from "./liquidity/v1beta1/query.rpc.Query";
import * as _200 from "./liquidity/v1beta1/tx.rpc.msg";
export declare namespace Victor118 {
    namespace liquidity {
        const v1beta1: {
            MsgClientImpl: typeof _200.MsgClientImpl;
            QueryClientImpl: typeof _199.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                liquidityPools(request?: _113.QueryLiquidityPoolsRequest): Promise<_113.QueryLiquidityPoolsResponse>;
                liquidityPool(request: _113.QueryLiquidityPoolRequest): Promise<_113.QueryLiquidityPoolResponse>;
                liquidityPoolByPoolCoinDenom(request: _113.QueryLiquidityPoolByPoolCoinDenomRequest): Promise<_113.QueryLiquidityPoolResponse>;
                liquidityPoolByReserveAcc(request: _113.QueryLiquidityPoolByReserveAccRequest): Promise<_113.QueryLiquidityPoolResponse>;
                liquidityPoolBatch(request: _113.QueryLiquidityPoolBatchRequest): Promise<_113.QueryLiquidityPoolBatchResponse>;
                poolBatchSwapMsgs(request: _113.QueryPoolBatchSwapMsgsRequest): Promise<_113.QueryPoolBatchSwapMsgsResponse>;
                poolBatchSwapMsg(request: _113.QueryPoolBatchSwapMsgRequest): Promise<_113.QueryPoolBatchSwapMsgResponse>;
                poolBatchDepositMsgs(request: _113.QueryPoolBatchDepositMsgsRequest): Promise<_113.QueryPoolBatchDepositMsgsResponse>;
                poolBatchDepositMsg(request: _113.QueryPoolBatchDepositMsgRequest): Promise<_113.QueryPoolBatchDepositMsgResponse>;
                poolBatchWithdrawMsgs(request: _113.QueryPoolBatchWithdrawMsgsRequest): Promise<_113.QueryPoolBatchWithdrawMsgsResponse>;
                poolBatchWithdrawMsg(request: _113.QueryPoolBatchWithdrawMsgRequest): Promise<_113.QueryPoolBatchWithdrawMsgResponse>;
                params(request?: _113.QueryParamsRequest): Promise<_113.QueryParamsResponse>;
            };
            LCDQueryClient: typeof _198.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createPool(value: _114.MsgCreatePool): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    depositWithinBatch(value: _114.MsgDepositWithinBatch): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    withdrawWithinBatch(value: _114.MsgWithdrawWithinBatch): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    swap(value: _114.MsgSwapWithinBatch): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createPool(value: _114.MsgCreatePool): {
                        typeUrl: string;
                        value: _114.MsgCreatePool;
                    };
                    depositWithinBatch(value: _114.MsgDepositWithinBatch): {
                        typeUrl: string;
                        value: _114.MsgDepositWithinBatch;
                    };
                    withdrawWithinBatch(value: _114.MsgWithdrawWithinBatch): {
                        typeUrl: string;
                        value: _114.MsgWithdrawWithinBatch;
                    };
                    swap(value: _114.MsgSwapWithinBatch): {
                        typeUrl: string;
                        value: _114.MsgSwapWithinBatch;
                    };
                };
                fromPartial: {
                    createPool(value: _114.MsgCreatePool): {
                        typeUrl: string;
                        value: _114.MsgCreatePool;
                    };
                    depositWithinBatch(value: _114.MsgDepositWithinBatch): {
                        typeUrl: string;
                        value: _114.MsgDepositWithinBatch;
                    };
                    withdrawWithinBatch(value: _114.MsgWithdrawWithinBatch): {
                        typeUrl: string;
                        value: _114.MsgWithdrawWithinBatch;
                    };
                    swap(value: _114.MsgSwapWithinBatch): {
                        typeUrl: string;
                        value: _114.MsgSwapWithinBatch;
                    };
                };
            };
            AminoConverter: {
                "/Victor118.liquidity.v1beta1.MsgCreatePool": {
                    aminoType: string;
                    toAmino: (message: _114.MsgCreatePool) => _114.MsgCreatePoolAmino;
                    fromAmino: (object: _114.MsgCreatePoolAmino) => _114.MsgCreatePool;
                };
                "/Victor118.liquidity.v1beta1.MsgDepositWithinBatch": {
                    aminoType: string;
                    toAmino: (message: _114.MsgDepositWithinBatch) => _114.MsgDepositWithinBatchAmino;
                    fromAmino: (object: _114.MsgDepositWithinBatchAmino) => _114.MsgDepositWithinBatch;
                };
                "/Victor118.liquidity.v1beta1.MsgWithdrawWithinBatch": {
                    aminoType: string;
                    toAmino: (message: _114.MsgWithdrawWithinBatch) => _114.MsgWithdrawWithinBatchAmino;
                    fromAmino: (object: _114.MsgWithdrawWithinBatchAmino) => _114.MsgWithdrawWithinBatch;
                };
                "/Victor118.liquidity.v1beta1.MsgSwapWithinBatch": {
                    aminoType: string;
                    toAmino: (message: _114.MsgSwapWithinBatch) => _114.MsgSwapWithinBatchAmino;
                    fromAmino: (object: _114.MsgSwapWithinBatchAmino) => _114.MsgSwapWithinBatch;
                };
            };
            MsgCreatePool: {
                typeUrl: string;
                is(o: any): o is _114.MsgCreatePool;
                isSDK(o: any): o is _114.MsgCreatePoolSDKType;
                isAmino(o: any): o is _114.MsgCreatePoolAmino;
                encode(message: _114.MsgCreatePool, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.MsgCreatePool;
                fromPartial(object: Partial<_114.MsgCreatePool>): _114.MsgCreatePool;
                fromAmino(object: _114.MsgCreatePoolAmino): _114.MsgCreatePool;
                toAmino(message: _114.MsgCreatePool): _114.MsgCreatePoolAmino;
                fromAminoMsg(object: _114.MsgCreatePoolAminoMsg): _114.MsgCreatePool;
                fromProtoMsg(message: _114.MsgCreatePoolProtoMsg): _114.MsgCreatePool;
                toProto(message: _114.MsgCreatePool): Uint8Array;
                toProtoMsg(message: _114.MsgCreatePool): _114.MsgCreatePoolProtoMsg;
            };
            MsgCreatePoolResponse: {
                typeUrl: string;
                is(o: any): o is _114.MsgCreatePoolResponse;
                isSDK(o: any): o is _114.MsgCreatePoolResponseSDKType;
                isAmino(o: any): o is _114.MsgCreatePoolResponseAmino;
                encode(_: _114.MsgCreatePoolResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.MsgCreatePoolResponse;
                fromPartial(_: Partial<_114.MsgCreatePoolResponse>): _114.MsgCreatePoolResponse;
                fromAmino(_: _114.MsgCreatePoolResponseAmino): _114.MsgCreatePoolResponse;
                toAmino(_: _114.MsgCreatePoolResponse): _114.MsgCreatePoolResponseAmino;
                fromAminoMsg(object: _114.MsgCreatePoolResponseAminoMsg): _114.MsgCreatePoolResponse;
                fromProtoMsg(message: _114.MsgCreatePoolResponseProtoMsg): _114.MsgCreatePoolResponse;
                toProto(message: _114.MsgCreatePoolResponse): Uint8Array;
                toProtoMsg(message: _114.MsgCreatePoolResponse): _114.MsgCreatePoolResponseProtoMsg;
            };
            MsgDepositWithinBatch: {
                typeUrl: string;
                is(o: any): o is _114.MsgDepositWithinBatch;
                isSDK(o: any): o is _114.MsgDepositWithinBatchSDKType;
                isAmino(o: any): o is _114.MsgDepositWithinBatchAmino;
                encode(message: _114.MsgDepositWithinBatch, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.MsgDepositWithinBatch;
                fromPartial(object: Partial<_114.MsgDepositWithinBatch>): _114.MsgDepositWithinBatch;
                fromAmino(object: _114.MsgDepositWithinBatchAmino): _114.MsgDepositWithinBatch;
                toAmino(message: _114.MsgDepositWithinBatch): _114.MsgDepositWithinBatchAmino;
                fromAminoMsg(object: _114.MsgDepositWithinBatchAminoMsg): _114.MsgDepositWithinBatch;
                fromProtoMsg(message: _114.MsgDepositWithinBatchProtoMsg): _114.MsgDepositWithinBatch;
                toProto(message: _114.MsgDepositWithinBatch): Uint8Array;
                toProtoMsg(message: _114.MsgDepositWithinBatch): _114.MsgDepositWithinBatchProtoMsg;
            };
            MsgDepositWithinBatchResponse: {
                typeUrl: string;
                is(o: any): o is _114.MsgDepositWithinBatchResponse;
                isSDK(o: any): o is _114.MsgDepositWithinBatchResponseSDKType;
                isAmino(o: any): o is _114.MsgDepositWithinBatchResponseAmino;
                encode(_: _114.MsgDepositWithinBatchResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.MsgDepositWithinBatchResponse;
                fromPartial(_: Partial<_114.MsgDepositWithinBatchResponse>): _114.MsgDepositWithinBatchResponse;
                fromAmino(_: _114.MsgDepositWithinBatchResponseAmino): _114.MsgDepositWithinBatchResponse;
                toAmino(_: _114.MsgDepositWithinBatchResponse): _114.MsgDepositWithinBatchResponseAmino;
                fromAminoMsg(object: _114.MsgDepositWithinBatchResponseAminoMsg): _114.MsgDepositWithinBatchResponse;
                fromProtoMsg(message: _114.MsgDepositWithinBatchResponseProtoMsg): _114.MsgDepositWithinBatchResponse;
                toProto(message: _114.MsgDepositWithinBatchResponse): Uint8Array;
                toProtoMsg(message: _114.MsgDepositWithinBatchResponse): _114.MsgDepositWithinBatchResponseProtoMsg;
            };
            MsgWithdrawWithinBatch: {
                typeUrl: string;
                is(o: any): o is _114.MsgWithdrawWithinBatch;
                isSDK(o: any): o is _114.MsgWithdrawWithinBatchSDKType;
                isAmino(o: any): o is _114.MsgWithdrawWithinBatchAmino;
                encode(message: _114.MsgWithdrawWithinBatch, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.MsgWithdrawWithinBatch;
                fromPartial(object: Partial<_114.MsgWithdrawWithinBatch>): _114.MsgWithdrawWithinBatch;
                fromAmino(object: _114.MsgWithdrawWithinBatchAmino): _114.MsgWithdrawWithinBatch;
                toAmino(message: _114.MsgWithdrawWithinBatch): _114.MsgWithdrawWithinBatchAmino;
                fromAminoMsg(object: _114.MsgWithdrawWithinBatchAminoMsg): _114.MsgWithdrawWithinBatch;
                fromProtoMsg(message: _114.MsgWithdrawWithinBatchProtoMsg): _114.MsgWithdrawWithinBatch;
                toProto(message: _114.MsgWithdrawWithinBatch): Uint8Array;
                toProtoMsg(message: _114.MsgWithdrawWithinBatch): _114.MsgWithdrawWithinBatchProtoMsg;
            };
            MsgWithdrawWithinBatchResponse: {
                typeUrl: string;
                is(o: any): o is _114.MsgWithdrawWithinBatchResponse;
                isSDK(o: any): o is _114.MsgWithdrawWithinBatchResponseSDKType;
                isAmino(o: any): o is _114.MsgWithdrawWithinBatchResponseAmino;
                encode(_: _114.MsgWithdrawWithinBatchResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.MsgWithdrawWithinBatchResponse;
                fromPartial(_: Partial<_114.MsgWithdrawWithinBatchResponse>): _114.MsgWithdrawWithinBatchResponse;
                fromAmino(_: _114.MsgWithdrawWithinBatchResponseAmino): _114.MsgWithdrawWithinBatchResponse;
                toAmino(_: _114.MsgWithdrawWithinBatchResponse): _114.MsgWithdrawWithinBatchResponseAmino;
                fromAminoMsg(object: _114.MsgWithdrawWithinBatchResponseAminoMsg): _114.MsgWithdrawWithinBatchResponse;
                fromProtoMsg(message: _114.MsgWithdrawWithinBatchResponseProtoMsg): _114.MsgWithdrawWithinBatchResponse;
                toProto(message: _114.MsgWithdrawWithinBatchResponse): Uint8Array;
                toProtoMsg(message: _114.MsgWithdrawWithinBatchResponse): _114.MsgWithdrawWithinBatchResponseProtoMsg;
            };
            MsgSwapWithinBatch: {
                typeUrl: string;
                is(o: any): o is _114.MsgSwapWithinBatch;
                isSDK(o: any): o is _114.MsgSwapWithinBatchSDKType;
                isAmino(o: any): o is _114.MsgSwapWithinBatchAmino;
                encode(message: _114.MsgSwapWithinBatch, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.MsgSwapWithinBatch;
                fromPartial(object: Partial<_114.MsgSwapWithinBatch>): _114.MsgSwapWithinBatch;
                fromAmino(object: _114.MsgSwapWithinBatchAmino): _114.MsgSwapWithinBatch;
                toAmino(message: _114.MsgSwapWithinBatch): _114.MsgSwapWithinBatchAmino;
                fromAminoMsg(object: _114.MsgSwapWithinBatchAminoMsg): _114.MsgSwapWithinBatch;
                fromProtoMsg(message: _114.MsgSwapWithinBatchProtoMsg): _114.MsgSwapWithinBatch;
                toProto(message: _114.MsgSwapWithinBatch): Uint8Array;
                toProtoMsg(message: _114.MsgSwapWithinBatch): _114.MsgSwapWithinBatchProtoMsg;
            };
            MsgSwapWithinBatchResponse: {
                typeUrl: string;
                is(o: any): o is _114.MsgSwapWithinBatchResponse;
                isSDK(o: any): o is _114.MsgSwapWithinBatchResponseSDKType;
                isAmino(o: any): o is _114.MsgSwapWithinBatchResponseAmino;
                encode(_: _114.MsgSwapWithinBatchResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _114.MsgSwapWithinBatchResponse;
                fromPartial(_: Partial<_114.MsgSwapWithinBatchResponse>): _114.MsgSwapWithinBatchResponse;
                fromAmino(_: _114.MsgSwapWithinBatchResponseAmino): _114.MsgSwapWithinBatchResponse;
                toAmino(_: _114.MsgSwapWithinBatchResponse): _114.MsgSwapWithinBatchResponseAmino;
                fromAminoMsg(object: _114.MsgSwapWithinBatchResponseAminoMsg): _114.MsgSwapWithinBatchResponse;
                fromProtoMsg(message: _114.MsgSwapWithinBatchResponseProtoMsg): _114.MsgSwapWithinBatchResponse;
                toProto(message: _114.MsgSwapWithinBatchResponse): Uint8Array;
                toProtoMsg(message: _114.MsgSwapWithinBatchResponse): _114.MsgSwapWithinBatchResponseProtoMsg;
            };
            QueryLiquidityPoolRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryLiquidityPoolRequest;
                isSDK(o: any): o is _113.QueryLiquidityPoolRequestSDKType;
                isAmino(o: any): o is _113.QueryLiquidityPoolRequestAmino;
                encode(message: _113.QueryLiquidityPoolRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryLiquidityPoolRequest;
                fromPartial(object: Partial<_113.QueryLiquidityPoolRequest>): _113.QueryLiquidityPoolRequest;
                fromAmino(object: _113.QueryLiquidityPoolRequestAmino): _113.QueryLiquidityPoolRequest;
                toAmino(message: _113.QueryLiquidityPoolRequest): _113.QueryLiquidityPoolRequestAmino;
                fromAminoMsg(object: _113.QueryLiquidityPoolRequestAminoMsg): _113.QueryLiquidityPoolRequest;
                fromProtoMsg(message: _113.QueryLiquidityPoolRequestProtoMsg): _113.QueryLiquidityPoolRequest;
                toProto(message: _113.QueryLiquidityPoolRequest): Uint8Array;
                toProtoMsg(message: _113.QueryLiquidityPoolRequest): _113.QueryLiquidityPoolRequestProtoMsg;
            };
            QueryLiquidityPoolResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryLiquidityPoolResponse;
                isSDK(o: any): o is _113.QueryLiquidityPoolResponseSDKType;
                isAmino(o: any): o is _113.QueryLiquidityPoolResponseAmino;
                encode(message: _113.QueryLiquidityPoolResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryLiquidityPoolResponse;
                fromPartial(object: Partial<_113.QueryLiquidityPoolResponse>): _113.QueryLiquidityPoolResponse;
                fromAmino(object: _113.QueryLiquidityPoolResponseAmino): _113.QueryLiquidityPoolResponse;
                toAmino(message: _113.QueryLiquidityPoolResponse): _113.QueryLiquidityPoolResponseAmino;
                fromAminoMsg(object: _113.QueryLiquidityPoolResponseAminoMsg): _113.QueryLiquidityPoolResponse;
                fromProtoMsg(message: _113.QueryLiquidityPoolResponseProtoMsg): _113.QueryLiquidityPoolResponse;
                toProto(message: _113.QueryLiquidityPoolResponse): Uint8Array;
                toProtoMsg(message: _113.QueryLiquidityPoolResponse): _113.QueryLiquidityPoolResponseProtoMsg;
            };
            QueryLiquidityPoolByPoolCoinDenomRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryLiquidityPoolByPoolCoinDenomRequest;
                isSDK(o: any): o is _113.QueryLiquidityPoolByPoolCoinDenomRequestSDKType;
                isAmino(o: any): o is _113.QueryLiquidityPoolByPoolCoinDenomRequestAmino;
                encode(message: _113.QueryLiquidityPoolByPoolCoinDenomRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryLiquidityPoolByPoolCoinDenomRequest;
                fromPartial(object: Partial<_113.QueryLiquidityPoolByPoolCoinDenomRequest>): _113.QueryLiquidityPoolByPoolCoinDenomRequest;
                fromAmino(object: _113.QueryLiquidityPoolByPoolCoinDenomRequestAmino): _113.QueryLiquidityPoolByPoolCoinDenomRequest;
                toAmino(message: _113.QueryLiquidityPoolByPoolCoinDenomRequest): _113.QueryLiquidityPoolByPoolCoinDenomRequestAmino;
                fromAminoMsg(object: _113.QueryLiquidityPoolByPoolCoinDenomRequestAminoMsg): _113.QueryLiquidityPoolByPoolCoinDenomRequest;
                fromProtoMsg(message: _113.QueryLiquidityPoolByPoolCoinDenomRequestProtoMsg): _113.QueryLiquidityPoolByPoolCoinDenomRequest;
                toProto(message: _113.QueryLiquidityPoolByPoolCoinDenomRequest): Uint8Array;
                toProtoMsg(message: _113.QueryLiquidityPoolByPoolCoinDenomRequest): _113.QueryLiquidityPoolByPoolCoinDenomRequestProtoMsg;
            };
            QueryLiquidityPoolByReserveAccRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryLiquidityPoolByReserveAccRequest;
                isSDK(o: any): o is _113.QueryLiquidityPoolByReserveAccRequestSDKType;
                isAmino(o: any): o is _113.QueryLiquidityPoolByReserveAccRequestAmino;
                encode(message: _113.QueryLiquidityPoolByReserveAccRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryLiquidityPoolByReserveAccRequest;
                fromPartial(object: Partial<_113.QueryLiquidityPoolByReserveAccRequest>): _113.QueryLiquidityPoolByReserveAccRequest;
                fromAmino(object: _113.QueryLiquidityPoolByReserveAccRequestAmino): _113.QueryLiquidityPoolByReserveAccRequest;
                toAmino(message: _113.QueryLiquidityPoolByReserveAccRequest): _113.QueryLiquidityPoolByReserveAccRequestAmino;
                fromAminoMsg(object: _113.QueryLiquidityPoolByReserveAccRequestAminoMsg): _113.QueryLiquidityPoolByReserveAccRequest;
                fromProtoMsg(message: _113.QueryLiquidityPoolByReserveAccRequestProtoMsg): _113.QueryLiquidityPoolByReserveAccRequest;
                toProto(message: _113.QueryLiquidityPoolByReserveAccRequest): Uint8Array;
                toProtoMsg(message: _113.QueryLiquidityPoolByReserveAccRequest): _113.QueryLiquidityPoolByReserveAccRequestProtoMsg;
            };
            QueryLiquidityPoolBatchRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryLiquidityPoolBatchRequest;
                isSDK(o: any): o is _113.QueryLiquidityPoolBatchRequestSDKType;
                isAmino(o: any): o is _113.QueryLiquidityPoolBatchRequestAmino;
                encode(message: _113.QueryLiquidityPoolBatchRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryLiquidityPoolBatchRequest;
                fromPartial(object: Partial<_113.QueryLiquidityPoolBatchRequest>): _113.QueryLiquidityPoolBatchRequest;
                fromAmino(object: _113.QueryLiquidityPoolBatchRequestAmino): _113.QueryLiquidityPoolBatchRequest;
                toAmino(message: _113.QueryLiquidityPoolBatchRequest): _113.QueryLiquidityPoolBatchRequestAmino;
                fromAminoMsg(object: _113.QueryLiquidityPoolBatchRequestAminoMsg): _113.QueryLiquidityPoolBatchRequest;
                fromProtoMsg(message: _113.QueryLiquidityPoolBatchRequestProtoMsg): _113.QueryLiquidityPoolBatchRequest;
                toProto(message: _113.QueryLiquidityPoolBatchRequest): Uint8Array;
                toProtoMsg(message: _113.QueryLiquidityPoolBatchRequest): _113.QueryLiquidityPoolBatchRequestProtoMsg;
            };
            QueryLiquidityPoolBatchResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryLiquidityPoolBatchResponse;
                isSDK(o: any): o is _113.QueryLiquidityPoolBatchResponseSDKType;
                isAmino(o: any): o is _113.QueryLiquidityPoolBatchResponseAmino;
                encode(message: _113.QueryLiquidityPoolBatchResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryLiquidityPoolBatchResponse;
                fromPartial(object: Partial<_113.QueryLiquidityPoolBatchResponse>): _113.QueryLiquidityPoolBatchResponse;
                fromAmino(object: _113.QueryLiquidityPoolBatchResponseAmino): _113.QueryLiquidityPoolBatchResponse;
                toAmino(message: _113.QueryLiquidityPoolBatchResponse): _113.QueryLiquidityPoolBatchResponseAmino;
                fromAminoMsg(object: _113.QueryLiquidityPoolBatchResponseAminoMsg): _113.QueryLiquidityPoolBatchResponse;
                fromProtoMsg(message: _113.QueryLiquidityPoolBatchResponseProtoMsg): _113.QueryLiquidityPoolBatchResponse;
                toProto(message: _113.QueryLiquidityPoolBatchResponse): Uint8Array;
                toProtoMsg(message: _113.QueryLiquidityPoolBatchResponse): _113.QueryLiquidityPoolBatchResponseProtoMsg;
            };
            QueryLiquidityPoolsRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryLiquidityPoolsRequest;
                isSDK(o: any): o is _113.QueryLiquidityPoolsRequestSDKType;
                isAmino(o: any): o is _113.QueryLiquidityPoolsRequestAmino;
                encode(message: _113.QueryLiquidityPoolsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryLiquidityPoolsRequest;
                fromPartial(object: Partial<_113.QueryLiquidityPoolsRequest>): _113.QueryLiquidityPoolsRequest;
                fromAmino(object: _113.QueryLiquidityPoolsRequestAmino): _113.QueryLiquidityPoolsRequest;
                toAmino(message: _113.QueryLiquidityPoolsRequest): _113.QueryLiquidityPoolsRequestAmino;
                fromAminoMsg(object: _113.QueryLiquidityPoolsRequestAminoMsg): _113.QueryLiquidityPoolsRequest;
                fromProtoMsg(message: _113.QueryLiquidityPoolsRequestProtoMsg): _113.QueryLiquidityPoolsRequest;
                toProto(message: _113.QueryLiquidityPoolsRequest): Uint8Array;
                toProtoMsg(message: _113.QueryLiquidityPoolsRequest): _113.QueryLiquidityPoolsRequestProtoMsg;
            };
            QueryLiquidityPoolsResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryLiquidityPoolsResponse;
                isSDK(o: any): o is _113.QueryLiquidityPoolsResponseSDKType;
                isAmino(o: any): o is _113.QueryLiquidityPoolsResponseAmino;
                encode(message: _113.QueryLiquidityPoolsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryLiquidityPoolsResponse;
                fromPartial(object: Partial<_113.QueryLiquidityPoolsResponse>): _113.QueryLiquidityPoolsResponse;
                fromAmino(object: _113.QueryLiquidityPoolsResponseAmino): _113.QueryLiquidityPoolsResponse;
                toAmino(message: _113.QueryLiquidityPoolsResponse): _113.QueryLiquidityPoolsResponseAmino;
                fromAminoMsg(object: _113.QueryLiquidityPoolsResponseAminoMsg): _113.QueryLiquidityPoolsResponse;
                fromProtoMsg(message: _113.QueryLiquidityPoolsResponseProtoMsg): _113.QueryLiquidityPoolsResponse;
                toProto(message: _113.QueryLiquidityPoolsResponse): Uint8Array;
                toProtoMsg(message: _113.QueryLiquidityPoolsResponse): _113.QueryLiquidityPoolsResponseProtoMsg;
            };
            QueryParamsRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryParamsRequest;
                isSDK(o: any): o is _113.QueryParamsRequestSDKType;
                isAmino(o: any): o is _113.QueryParamsRequestAmino;
                encode(_: _113.QueryParamsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryParamsRequest;
                fromPartial(_: Partial<_113.QueryParamsRequest>): _113.QueryParamsRequest;
                fromAmino(_: _113.QueryParamsRequestAmino): _113.QueryParamsRequest;
                toAmino(_: _113.QueryParamsRequest): _113.QueryParamsRequestAmino;
                fromAminoMsg(object: _113.QueryParamsRequestAminoMsg): _113.QueryParamsRequest;
                fromProtoMsg(message: _113.QueryParamsRequestProtoMsg): _113.QueryParamsRequest;
                toProto(message: _113.QueryParamsRequest): Uint8Array;
                toProtoMsg(message: _113.QueryParamsRequest): _113.QueryParamsRequestProtoMsg;
            };
            QueryParamsResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryParamsResponse;
                isSDK(o: any): o is _113.QueryParamsResponseSDKType;
                isAmino(o: any): o is _113.QueryParamsResponseAmino;
                encode(message: _113.QueryParamsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryParamsResponse;
                fromPartial(object: Partial<_113.QueryParamsResponse>): _113.QueryParamsResponse;
                fromAmino(object: _113.QueryParamsResponseAmino): _113.QueryParamsResponse;
                toAmino(message: _113.QueryParamsResponse): _113.QueryParamsResponseAmino;
                fromAminoMsg(object: _113.QueryParamsResponseAminoMsg): _113.QueryParamsResponse;
                fromProtoMsg(message: _113.QueryParamsResponseProtoMsg): _113.QueryParamsResponse;
                toProto(message: _113.QueryParamsResponse): Uint8Array;
                toProtoMsg(message: _113.QueryParamsResponse): _113.QueryParamsResponseProtoMsg;
            };
            QueryPoolBatchSwapMsgsRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchSwapMsgsRequest;
                isSDK(o: any): o is _113.QueryPoolBatchSwapMsgsRequestSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchSwapMsgsRequestAmino;
                encode(message: _113.QueryPoolBatchSwapMsgsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchSwapMsgsRequest;
                fromPartial(object: Partial<_113.QueryPoolBatchSwapMsgsRequest>): _113.QueryPoolBatchSwapMsgsRequest;
                fromAmino(object: _113.QueryPoolBatchSwapMsgsRequestAmino): _113.QueryPoolBatchSwapMsgsRequest;
                toAmino(message: _113.QueryPoolBatchSwapMsgsRequest): _113.QueryPoolBatchSwapMsgsRequestAmino;
                fromAminoMsg(object: _113.QueryPoolBatchSwapMsgsRequestAminoMsg): _113.QueryPoolBatchSwapMsgsRequest;
                fromProtoMsg(message: _113.QueryPoolBatchSwapMsgsRequestProtoMsg): _113.QueryPoolBatchSwapMsgsRequest;
                toProto(message: _113.QueryPoolBatchSwapMsgsRequest): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchSwapMsgsRequest): _113.QueryPoolBatchSwapMsgsRequestProtoMsg;
            };
            QueryPoolBatchSwapMsgRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchSwapMsgRequest;
                isSDK(o: any): o is _113.QueryPoolBatchSwapMsgRequestSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchSwapMsgRequestAmino;
                encode(message: _113.QueryPoolBatchSwapMsgRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchSwapMsgRequest;
                fromPartial(object: Partial<_113.QueryPoolBatchSwapMsgRequest>): _113.QueryPoolBatchSwapMsgRequest;
                fromAmino(object: _113.QueryPoolBatchSwapMsgRequestAmino): _113.QueryPoolBatchSwapMsgRequest;
                toAmino(message: _113.QueryPoolBatchSwapMsgRequest): _113.QueryPoolBatchSwapMsgRequestAmino;
                fromAminoMsg(object: _113.QueryPoolBatchSwapMsgRequestAminoMsg): _113.QueryPoolBatchSwapMsgRequest;
                fromProtoMsg(message: _113.QueryPoolBatchSwapMsgRequestProtoMsg): _113.QueryPoolBatchSwapMsgRequest;
                toProto(message: _113.QueryPoolBatchSwapMsgRequest): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchSwapMsgRequest): _113.QueryPoolBatchSwapMsgRequestProtoMsg;
            };
            QueryPoolBatchSwapMsgsResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchSwapMsgsResponse;
                isSDK(o: any): o is _113.QueryPoolBatchSwapMsgsResponseSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchSwapMsgsResponseAmino;
                encode(message: _113.QueryPoolBatchSwapMsgsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchSwapMsgsResponse;
                fromPartial(object: Partial<_113.QueryPoolBatchSwapMsgsResponse>): _113.QueryPoolBatchSwapMsgsResponse;
                fromAmino(object: _113.QueryPoolBatchSwapMsgsResponseAmino): _113.QueryPoolBatchSwapMsgsResponse;
                toAmino(message: _113.QueryPoolBatchSwapMsgsResponse): _113.QueryPoolBatchSwapMsgsResponseAmino;
                fromAminoMsg(object: _113.QueryPoolBatchSwapMsgsResponseAminoMsg): _113.QueryPoolBatchSwapMsgsResponse;
                fromProtoMsg(message: _113.QueryPoolBatchSwapMsgsResponseProtoMsg): _113.QueryPoolBatchSwapMsgsResponse;
                toProto(message: _113.QueryPoolBatchSwapMsgsResponse): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchSwapMsgsResponse): _113.QueryPoolBatchSwapMsgsResponseProtoMsg;
            };
            QueryPoolBatchSwapMsgResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchSwapMsgResponse;
                isSDK(o: any): o is _113.QueryPoolBatchSwapMsgResponseSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchSwapMsgResponseAmino;
                encode(message: _113.QueryPoolBatchSwapMsgResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchSwapMsgResponse;
                fromPartial(object: Partial<_113.QueryPoolBatchSwapMsgResponse>): _113.QueryPoolBatchSwapMsgResponse;
                fromAmino(object: _113.QueryPoolBatchSwapMsgResponseAmino): _113.QueryPoolBatchSwapMsgResponse;
                toAmino(message: _113.QueryPoolBatchSwapMsgResponse): _113.QueryPoolBatchSwapMsgResponseAmino;
                fromAminoMsg(object: _113.QueryPoolBatchSwapMsgResponseAminoMsg): _113.QueryPoolBatchSwapMsgResponse;
                fromProtoMsg(message: _113.QueryPoolBatchSwapMsgResponseProtoMsg): _113.QueryPoolBatchSwapMsgResponse;
                toProto(message: _113.QueryPoolBatchSwapMsgResponse): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchSwapMsgResponse): _113.QueryPoolBatchSwapMsgResponseProtoMsg;
            };
            QueryPoolBatchDepositMsgsRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchDepositMsgsRequest;
                isSDK(o: any): o is _113.QueryPoolBatchDepositMsgsRequestSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchDepositMsgsRequestAmino;
                encode(message: _113.QueryPoolBatchDepositMsgsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchDepositMsgsRequest;
                fromPartial(object: Partial<_113.QueryPoolBatchDepositMsgsRequest>): _113.QueryPoolBatchDepositMsgsRequest;
                fromAmino(object: _113.QueryPoolBatchDepositMsgsRequestAmino): _113.QueryPoolBatchDepositMsgsRequest;
                toAmino(message: _113.QueryPoolBatchDepositMsgsRequest): _113.QueryPoolBatchDepositMsgsRequestAmino;
                fromAminoMsg(object: _113.QueryPoolBatchDepositMsgsRequestAminoMsg): _113.QueryPoolBatchDepositMsgsRequest;
                fromProtoMsg(message: _113.QueryPoolBatchDepositMsgsRequestProtoMsg): _113.QueryPoolBatchDepositMsgsRequest;
                toProto(message: _113.QueryPoolBatchDepositMsgsRequest): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchDepositMsgsRequest): _113.QueryPoolBatchDepositMsgsRequestProtoMsg;
            };
            QueryPoolBatchDepositMsgRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchDepositMsgRequest;
                isSDK(o: any): o is _113.QueryPoolBatchDepositMsgRequestSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchDepositMsgRequestAmino;
                encode(message: _113.QueryPoolBatchDepositMsgRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchDepositMsgRequest;
                fromPartial(object: Partial<_113.QueryPoolBatchDepositMsgRequest>): _113.QueryPoolBatchDepositMsgRequest;
                fromAmino(object: _113.QueryPoolBatchDepositMsgRequestAmino): _113.QueryPoolBatchDepositMsgRequest;
                toAmino(message: _113.QueryPoolBatchDepositMsgRequest): _113.QueryPoolBatchDepositMsgRequestAmino;
                fromAminoMsg(object: _113.QueryPoolBatchDepositMsgRequestAminoMsg): _113.QueryPoolBatchDepositMsgRequest;
                fromProtoMsg(message: _113.QueryPoolBatchDepositMsgRequestProtoMsg): _113.QueryPoolBatchDepositMsgRequest;
                toProto(message: _113.QueryPoolBatchDepositMsgRequest): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchDepositMsgRequest): _113.QueryPoolBatchDepositMsgRequestProtoMsg;
            };
            QueryPoolBatchDepositMsgsResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchDepositMsgsResponse;
                isSDK(o: any): o is _113.QueryPoolBatchDepositMsgsResponseSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchDepositMsgsResponseAmino;
                encode(message: _113.QueryPoolBatchDepositMsgsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchDepositMsgsResponse;
                fromPartial(object: Partial<_113.QueryPoolBatchDepositMsgsResponse>): _113.QueryPoolBatchDepositMsgsResponse;
                fromAmino(object: _113.QueryPoolBatchDepositMsgsResponseAmino): _113.QueryPoolBatchDepositMsgsResponse;
                toAmino(message: _113.QueryPoolBatchDepositMsgsResponse): _113.QueryPoolBatchDepositMsgsResponseAmino;
                fromAminoMsg(object: _113.QueryPoolBatchDepositMsgsResponseAminoMsg): _113.QueryPoolBatchDepositMsgsResponse;
                fromProtoMsg(message: _113.QueryPoolBatchDepositMsgsResponseProtoMsg): _113.QueryPoolBatchDepositMsgsResponse;
                toProto(message: _113.QueryPoolBatchDepositMsgsResponse): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchDepositMsgsResponse): _113.QueryPoolBatchDepositMsgsResponseProtoMsg;
            };
            QueryPoolBatchDepositMsgResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchDepositMsgResponse;
                isSDK(o: any): o is _113.QueryPoolBatchDepositMsgResponseSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchDepositMsgResponseAmino;
                encode(message: _113.QueryPoolBatchDepositMsgResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchDepositMsgResponse;
                fromPartial(object: Partial<_113.QueryPoolBatchDepositMsgResponse>): _113.QueryPoolBatchDepositMsgResponse;
                fromAmino(object: _113.QueryPoolBatchDepositMsgResponseAmino): _113.QueryPoolBatchDepositMsgResponse;
                toAmino(message: _113.QueryPoolBatchDepositMsgResponse): _113.QueryPoolBatchDepositMsgResponseAmino;
                fromAminoMsg(object: _113.QueryPoolBatchDepositMsgResponseAminoMsg): _113.QueryPoolBatchDepositMsgResponse;
                fromProtoMsg(message: _113.QueryPoolBatchDepositMsgResponseProtoMsg): _113.QueryPoolBatchDepositMsgResponse;
                toProto(message: _113.QueryPoolBatchDepositMsgResponse): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchDepositMsgResponse): _113.QueryPoolBatchDepositMsgResponseProtoMsg;
            };
            QueryPoolBatchWithdrawMsgsRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchWithdrawMsgsRequest;
                isSDK(o: any): o is _113.QueryPoolBatchWithdrawMsgsRequestSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchWithdrawMsgsRequestAmino;
                encode(message: _113.QueryPoolBatchWithdrawMsgsRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchWithdrawMsgsRequest;
                fromPartial(object: Partial<_113.QueryPoolBatchWithdrawMsgsRequest>): _113.QueryPoolBatchWithdrawMsgsRequest;
                fromAmino(object: _113.QueryPoolBatchWithdrawMsgsRequestAmino): _113.QueryPoolBatchWithdrawMsgsRequest;
                toAmino(message: _113.QueryPoolBatchWithdrawMsgsRequest): _113.QueryPoolBatchWithdrawMsgsRequestAmino;
                fromAminoMsg(object: _113.QueryPoolBatchWithdrawMsgsRequestAminoMsg): _113.QueryPoolBatchWithdrawMsgsRequest;
                fromProtoMsg(message: _113.QueryPoolBatchWithdrawMsgsRequestProtoMsg): _113.QueryPoolBatchWithdrawMsgsRequest;
                toProto(message: _113.QueryPoolBatchWithdrawMsgsRequest): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchWithdrawMsgsRequest): _113.QueryPoolBatchWithdrawMsgsRequestProtoMsg;
            };
            QueryPoolBatchWithdrawMsgRequest: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchWithdrawMsgRequest;
                isSDK(o: any): o is _113.QueryPoolBatchWithdrawMsgRequestSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchWithdrawMsgRequestAmino;
                encode(message: _113.QueryPoolBatchWithdrawMsgRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchWithdrawMsgRequest;
                fromPartial(object: Partial<_113.QueryPoolBatchWithdrawMsgRequest>): _113.QueryPoolBatchWithdrawMsgRequest;
                fromAmino(object: _113.QueryPoolBatchWithdrawMsgRequestAmino): _113.QueryPoolBatchWithdrawMsgRequest;
                toAmino(message: _113.QueryPoolBatchWithdrawMsgRequest): _113.QueryPoolBatchWithdrawMsgRequestAmino;
                fromAminoMsg(object: _113.QueryPoolBatchWithdrawMsgRequestAminoMsg): _113.QueryPoolBatchWithdrawMsgRequest;
                fromProtoMsg(message: _113.QueryPoolBatchWithdrawMsgRequestProtoMsg): _113.QueryPoolBatchWithdrawMsgRequest;
                toProto(message: _113.QueryPoolBatchWithdrawMsgRequest): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchWithdrawMsgRequest): _113.QueryPoolBatchWithdrawMsgRequestProtoMsg;
            };
            QueryPoolBatchWithdrawMsgsResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchWithdrawMsgsResponse;
                isSDK(o: any): o is _113.QueryPoolBatchWithdrawMsgsResponseSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchWithdrawMsgsResponseAmino;
                encode(message: _113.QueryPoolBatchWithdrawMsgsResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchWithdrawMsgsResponse;
                fromPartial(object: Partial<_113.QueryPoolBatchWithdrawMsgsResponse>): _113.QueryPoolBatchWithdrawMsgsResponse;
                fromAmino(object: _113.QueryPoolBatchWithdrawMsgsResponseAmino): _113.QueryPoolBatchWithdrawMsgsResponse;
                toAmino(message: _113.QueryPoolBatchWithdrawMsgsResponse): _113.QueryPoolBatchWithdrawMsgsResponseAmino;
                fromAminoMsg(object: _113.QueryPoolBatchWithdrawMsgsResponseAminoMsg): _113.QueryPoolBatchWithdrawMsgsResponse;
                fromProtoMsg(message: _113.QueryPoolBatchWithdrawMsgsResponseProtoMsg): _113.QueryPoolBatchWithdrawMsgsResponse;
                toProto(message: _113.QueryPoolBatchWithdrawMsgsResponse): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchWithdrawMsgsResponse): _113.QueryPoolBatchWithdrawMsgsResponseProtoMsg;
            };
            QueryPoolBatchWithdrawMsgResponse: {
                typeUrl: string;
                is(o: any): o is _113.QueryPoolBatchWithdrawMsgResponse;
                isSDK(o: any): o is _113.QueryPoolBatchWithdrawMsgResponseSDKType;
                isAmino(o: any): o is _113.QueryPoolBatchWithdrawMsgResponseAmino;
                encode(message: _113.QueryPoolBatchWithdrawMsgResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _113.QueryPoolBatchWithdrawMsgResponse;
                fromPartial(object: Partial<_113.QueryPoolBatchWithdrawMsgResponse>): _113.QueryPoolBatchWithdrawMsgResponse;
                fromAmino(object: _113.QueryPoolBatchWithdrawMsgResponseAmino): _113.QueryPoolBatchWithdrawMsgResponse;
                toAmino(message: _113.QueryPoolBatchWithdrawMsgResponse): _113.QueryPoolBatchWithdrawMsgResponseAmino;
                fromAminoMsg(object: _113.QueryPoolBatchWithdrawMsgResponseAminoMsg): _113.QueryPoolBatchWithdrawMsgResponse;
                fromProtoMsg(message: _113.QueryPoolBatchWithdrawMsgResponseProtoMsg): _113.QueryPoolBatchWithdrawMsgResponse;
                toProto(message: _113.QueryPoolBatchWithdrawMsgResponse): Uint8Array;
                toProtoMsg(message: _113.QueryPoolBatchWithdrawMsgResponse): _113.QueryPoolBatchWithdrawMsgResponseProtoMsg;
            };
            PoolType: {
                typeUrl: string;
                is(o: any): o is _112.PoolType;
                isSDK(o: any): o is _112.PoolTypeSDKType;
                isAmino(o: any): o is _112.PoolTypeAmino;
                encode(message: _112.PoolType, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.PoolType;
                fromPartial(object: Partial<_112.PoolType>): _112.PoolType;
                fromAmino(object: _112.PoolTypeAmino): _112.PoolType;
                toAmino(message: _112.PoolType): _112.PoolTypeAmino;
                fromAminoMsg(object: _112.PoolTypeAminoMsg): _112.PoolType;
                fromProtoMsg(message: _112.PoolTypeProtoMsg): _112.PoolType;
                toProto(message: _112.PoolType): Uint8Array;
                toProtoMsg(message: _112.PoolType): _112.PoolTypeProtoMsg;
            };
            Params: {
                typeUrl: string;
                is(o: any): o is _112.Params;
                isSDK(o: any): o is _112.ParamsSDKType;
                isAmino(o: any): o is _112.ParamsAmino;
                encode(message: _112.Params, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.Params;
                fromPartial(object: Partial<_112.Params>): _112.Params;
                fromAmino(object: _112.ParamsAmino): _112.Params;
                toAmino(message: _112.Params): _112.ParamsAmino;
                fromAminoMsg(object: _112.ParamsAminoMsg): _112.Params;
                fromProtoMsg(message: _112.ParamsProtoMsg): _112.Params;
                toProto(message: _112.Params): Uint8Array;
                toProtoMsg(message: _112.Params): _112.ParamsProtoMsg;
            };
            Pool: {
                typeUrl: string;
                is(o: any): o is _112.Pool;
                isSDK(o: any): o is _112.PoolSDKType;
                isAmino(o: any): o is _112.PoolAmino;
                encode(message: _112.Pool, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.Pool;
                fromPartial(object: Partial<_112.Pool>): _112.Pool;
                fromAmino(object: _112.PoolAmino): _112.Pool;
                toAmino(message: _112.Pool): _112.PoolAmino;
                fromAminoMsg(object: _112.PoolAminoMsg): _112.Pool;
                fromProtoMsg(message: _112.PoolProtoMsg): _112.Pool;
                toProto(message: _112.Pool): Uint8Array;
                toProtoMsg(message: _112.Pool): _112.PoolProtoMsg;
            };
            PoolMetadata: {
                typeUrl: string;
                is(o: any): o is _112.PoolMetadata;
                isSDK(o: any): o is _112.PoolMetadataSDKType;
                isAmino(o: any): o is _112.PoolMetadataAmino;
                encode(message: _112.PoolMetadata, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.PoolMetadata;
                fromPartial(object: Partial<_112.PoolMetadata>): _112.PoolMetadata;
                fromAmino(object: _112.PoolMetadataAmino): _112.PoolMetadata;
                toAmino(message: _112.PoolMetadata): _112.PoolMetadataAmino;
                fromAminoMsg(object: _112.PoolMetadataAminoMsg): _112.PoolMetadata;
                fromProtoMsg(message: _112.PoolMetadataProtoMsg): _112.PoolMetadata;
                toProto(message: _112.PoolMetadata): Uint8Array;
                toProtoMsg(message: _112.PoolMetadata): _112.PoolMetadataProtoMsg;
            };
            PoolBatch: {
                typeUrl: string;
                is(o: any): o is _112.PoolBatch;
                isSDK(o: any): o is _112.PoolBatchSDKType;
                isAmino(o: any): o is _112.PoolBatchAmino;
                encode(message: _112.PoolBatch, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.PoolBatch;
                fromPartial(object: Partial<_112.PoolBatch>): _112.PoolBatch;
                fromAmino(object: _112.PoolBatchAmino): _112.PoolBatch;
                toAmino(message: _112.PoolBatch): _112.PoolBatchAmino;
                fromAminoMsg(object: _112.PoolBatchAminoMsg): _112.PoolBatch;
                fromProtoMsg(message: _112.PoolBatchProtoMsg): _112.PoolBatch;
                toProto(message: _112.PoolBatch): Uint8Array;
                toProtoMsg(message: _112.PoolBatch): _112.PoolBatchProtoMsg;
            };
            DepositMsgState: {
                typeUrl: string;
                is(o: any): o is _112.DepositMsgState;
                isSDK(o: any): o is _112.DepositMsgStateSDKType;
                isAmino(o: any): o is _112.DepositMsgStateAmino;
                encode(message: _112.DepositMsgState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.DepositMsgState;
                fromPartial(object: Partial<_112.DepositMsgState>): _112.DepositMsgState;
                fromAmino(object: _112.DepositMsgStateAmino): _112.DepositMsgState;
                toAmino(message: _112.DepositMsgState): _112.DepositMsgStateAmino;
                fromAminoMsg(object: _112.DepositMsgStateAminoMsg): _112.DepositMsgState;
                fromProtoMsg(message: _112.DepositMsgStateProtoMsg): _112.DepositMsgState;
                toProto(message: _112.DepositMsgState): Uint8Array;
                toProtoMsg(message: _112.DepositMsgState): _112.DepositMsgStateProtoMsg;
            };
            WithdrawMsgState: {
                typeUrl: string;
                is(o: any): o is _112.WithdrawMsgState;
                isSDK(o: any): o is _112.WithdrawMsgStateSDKType;
                isAmino(o: any): o is _112.WithdrawMsgStateAmino;
                encode(message: _112.WithdrawMsgState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.WithdrawMsgState;
                fromPartial(object: Partial<_112.WithdrawMsgState>): _112.WithdrawMsgState;
                fromAmino(object: _112.WithdrawMsgStateAmino): _112.WithdrawMsgState;
                toAmino(message: _112.WithdrawMsgState): _112.WithdrawMsgStateAmino;
                fromAminoMsg(object: _112.WithdrawMsgStateAminoMsg): _112.WithdrawMsgState;
                fromProtoMsg(message: _112.WithdrawMsgStateProtoMsg): _112.WithdrawMsgState;
                toProto(message: _112.WithdrawMsgState): Uint8Array;
                toProtoMsg(message: _112.WithdrawMsgState): _112.WithdrawMsgStateProtoMsg;
            };
            SwapMsgState: {
                typeUrl: string;
                is(o: any): o is _112.SwapMsgState;
                isSDK(o: any): o is _112.SwapMsgStateSDKType;
                isAmino(o: any): o is _112.SwapMsgStateAmino;
                encode(message: _112.SwapMsgState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _112.SwapMsgState;
                fromPartial(object: Partial<_112.SwapMsgState>): _112.SwapMsgState;
                fromAmino(object: _112.SwapMsgStateAmino): _112.SwapMsgState;
                toAmino(message: _112.SwapMsgState): _112.SwapMsgStateAmino;
                fromAminoMsg(object: _112.SwapMsgStateAminoMsg): _112.SwapMsgState;
                fromProtoMsg(message: _112.SwapMsgStateProtoMsg): _112.SwapMsgState;
                toProto(message: _112.SwapMsgState): Uint8Array;
                toProtoMsg(message: _112.SwapMsgState): _112.SwapMsgStateProtoMsg;
            };
            PoolRecord: {
                typeUrl: string;
                is(o: any): o is _111.PoolRecord;
                isSDK(o: any): o is _111.PoolRecordSDKType;
                isAmino(o: any): o is _111.PoolRecordAmino;
                encode(message: _111.PoolRecord, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _111.PoolRecord;
                fromPartial(object: Partial<_111.PoolRecord>): _111.PoolRecord;
                fromAmino(object: _111.PoolRecordAmino): _111.PoolRecord;
                toAmino(message: _111.PoolRecord): _111.PoolRecordAmino;
                fromAminoMsg(object: _111.PoolRecordAminoMsg): _111.PoolRecord;
                fromProtoMsg(message: _111.PoolRecordProtoMsg): _111.PoolRecord;
                toProto(message: _111.PoolRecord): Uint8Array;
                toProtoMsg(message: _111.PoolRecord): _111.PoolRecordProtoMsg;
            };
            GenesisState: {
                typeUrl: string;
                is(o: any): o is _111.GenesisState;
                isSDK(o: any): o is _111.GenesisStateSDKType;
                isAmino(o: any): o is _111.GenesisStateAmino;
                encode(message: _111.GenesisState, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _111.GenesisState;
                fromPartial(object: Partial<_111.GenesisState>): _111.GenesisState;
                fromAmino(object: _111.GenesisStateAmino): _111.GenesisState;
                toAmino(message: _111.GenesisState): _111.GenesisStateAmino;
                fromAminoMsg(object: _111.GenesisStateAminoMsg): _111.GenesisState;
                fromProtoMsg(message: _111.GenesisStateProtoMsg): _111.GenesisState;
                toProto(message: _111.GenesisState): Uint8Array;
                toProtoMsg(message: _111.GenesisState): _111.GenesisStateProtoMsg;
            };
        };
    }
    const ClientFactory: {
        createRPCMsgClient: ({ rpc }: {
            rpc: import("../helpers").Rpc;
        }) => Promise<{
            cosmos: {
                authz: {
                    v1beta1: import("../cosmos/authz/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                bank: {
                    v1beta1: import("../cosmos/bank/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                distribution: {
                    v1beta1: import("../cosmos/distribution/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                feegrant: {
                    v1beta1: import("../cosmos/feegrant/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                gov: {
                    v1: import("../cosmos/gov/v1/tx.rpc.msg").MsgClientImpl;
                    v1beta1: import("../cosmos/gov/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                group: {
                    v1: import("../cosmos/group/v1/tx.rpc.msg").MsgClientImpl;
                };
                staking: {
                    v1beta1: import("../cosmos/staking/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                upgrade: {
                    v1beta1: import("../cosmos/upgrade/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
                vesting: {
                    v1beta1: import("../cosmos/vesting/v1beta1/tx.rpc.msg").MsgClientImpl;
                };
            };
            Victor118: {
                liquidity: {
                    v1beta1: _200.MsgClientImpl;
                };
            };
        }>;
        createRPCQueryClient: ({ rpcEndpoint }: {
            rpcEndpoint: string | import("@cosmjs/tendermint-rpc").HttpEndpoint;
        }) => Promise<{
            cosmos: {
                auth: {
                    v1beta1: {
                        accounts(request?: import("../cosmos/auth/v1beta1/query").QueryAccountsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryAccountsResponse>;
                        account(request: import("../cosmos/auth/v1beta1/query").QueryAccountRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryAccountResponse>;
                        params(request?: import("../cosmos/auth/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryParamsResponse>;
                        moduleAccounts(request?: import("../cosmos/auth/v1beta1/query").QueryModuleAccountsRequest): Promise<import("../cosmos/auth/v1beta1/query").QueryModuleAccountsResponse>;
                        bech32Prefix(request?: import("../cosmos/auth/v1beta1/query").Bech32PrefixRequest): Promise<import("../cosmos/auth/v1beta1/query").Bech32PrefixResponse>;
                        addressBytesToString(request: import("../cosmos/auth/v1beta1/query").AddressBytesToStringRequest): Promise<import("../cosmos/auth/v1beta1/query").AddressBytesToStringResponse>;
                        addressStringToBytes(request: import("../cosmos/auth/v1beta1/query").AddressStringToBytesRequest): Promise<import("../cosmos/auth/v1beta1/query").AddressStringToBytesResponse>;
                    };
                };
                authz: {
                    v1beta1: {
                        grants(request: import("../cosmos/authz/v1beta1/query").QueryGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGrantsResponse>;
                        granterGrants(request: import("../cosmos/authz/v1beta1/query").QueryGranterGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGranterGrantsResponse>;
                        granteeGrants(request: import("../cosmos/authz/v1beta1/query").QueryGranteeGrantsRequest): Promise<import("../cosmos/authz/v1beta1/query").QueryGranteeGrantsResponse>;
                    };
                };
                bank: {
                    v1beta1: {
                        balance(request: import("../cosmos/bank/v1beta1/query").QueryBalanceRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryBalanceResponse>;
                        allBalances(request: import("../cosmos/bank/v1beta1/query").QueryAllBalancesRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryAllBalancesResponse>;
                        spendableBalances(request: import("../cosmos/bank/v1beta1/query").QuerySpendableBalancesRequest): Promise<import("../cosmos/bank/v1beta1/query").QuerySpendableBalancesResponse>;
                        totalSupply(request?: import("../cosmos/bank/v1beta1/query").QueryTotalSupplyRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryTotalSupplyResponse>;
                        supplyOf(request: import("../cosmos/bank/v1beta1/query").QuerySupplyOfRequest): Promise<import("../cosmos/bank/v1beta1/query").QuerySupplyOfResponse>;
                        params(request?: import("../cosmos/bank/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryParamsResponse>;
                        denomMetadata(request: import("../cosmos/bank/v1beta1/query").QueryDenomMetadataRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomMetadataResponse>;
                        denomsMetadata(request?: import("../cosmos/bank/v1beta1/query").QueryDenomsMetadataRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomsMetadataResponse>;
                        denomOwners(request: import("../cosmos/bank/v1beta1/query").QueryDenomOwnersRequest): Promise<import("../cosmos/bank/v1beta1/query").QueryDenomOwnersResponse>;
                    };
                };
                distribution: {
                    v1beta1: {
                        params(request?: import("../cosmos/distribution/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryParamsResponse>;
                        validatorOutstandingRewards(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorOutstandingRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorOutstandingRewardsResponse>;
                        validatorCommission(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorCommissionRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorCommissionResponse>;
                        validatorSlashes(request: import("../cosmos/distribution/v1beta1/query").QueryValidatorSlashesRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryValidatorSlashesResponse>;
                        delegationRewards(request: import("../cosmos/distribution/v1beta1/query").QueryDelegationRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegationRewardsResponse>;
                        delegationTotalRewards(request: import("../cosmos/distribution/v1beta1/query").QueryDelegationTotalRewardsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegationTotalRewardsResponse>;
                        delegatorValidators(request: import("../cosmos/distribution/v1beta1/query").QueryDelegatorValidatorsRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegatorValidatorsResponse>;
                        delegatorWithdrawAddress(request: import("../cosmos/distribution/v1beta1/query").QueryDelegatorWithdrawAddressRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryDelegatorWithdrawAddressResponse>;
                        communityPool(request?: import("../cosmos/distribution/v1beta1/query").QueryCommunityPoolRequest): Promise<import("../cosmos/distribution/v1beta1/query").QueryCommunityPoolResponse>;
                    };
                };
                feegrant: {
                    v1beta1: {
                        allowance(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowanceRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowanceResponse>;
                        allowances(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowancesRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowancesResponse>;
                        allowancesByGranter(request: import("../cosmos/feegrant/v1beta1/query").QueryAllowancesByGranterRequest): Promise<import("../cosmos/feegrant/v1beta1/query").QueryAllowancesByGranterResponse>;
                    };
                };
                gov: {
                    v1: {
                        proposal(request: import("../cosmos/gov/v1/query").QueryProposalRequest): Promise<import("../cosmos/gov/v1/query").QueryProposalResponse>;
                        proposals(request: import("../cosmos/gov/v1/query").QueryProposalsRequest): Promise<import("../cosmos/gov/v1/query").QueryProposalsResponse>;
                        vote(request: import("../cosmos/gov/v1/query").QueryVoteRequest): Promise<import("../cosmos/gov/v1/query").QueryVoteResponse>;
                        votes(request: import("../cosmos/gov/v1/query").QueryVotesRequest): Promise<import("../cosmos/gov/v1/query").QueryVotesResponse>;
                        params(request: import("../cosmos/gov/v1/query").QueryParamsRequest): Promise<import("../cosmos/gov/v1/query").QueryParamsResponse>;
                        deposit(request: import("../cosmos/gov/v1/query").QueryDepositRequest): Promise<import("../cosmos/gov/v1/query").QueryDepositResponse>;
                        deposits(request: import("../cosmos/gov/v1/query").QueryDepositsRequest): Promise<import("../cosmos/gov/v1/query").QueryDepositsResponse>;
                        tallyResult(request: import("../cosmos/gov/v1/query").QueryTallyResultRequest): Promise<import("../cosmos/gov/v1/query").QueryTallyResultResponse>;
                    };
                    v1beta1: {
                        proposal(request: import("../cosmos/gov/v1beta1/query").QueryProposalRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryProposalResponse>;
                        proposals(request: import("../cosmos/gov/v1beta1/query").QueryProposalsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryProposalsResponse>;
                        vote(request: import("../cosmos/gov/v1beta1/query").QueryVoteRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryVoteResponse>;
                        votes(request: import("../cosmos/gov/v1beta1/query").QueryVotesRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryVotesResponse>;
                        params(request: import("../cosmos/gov/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryParamsResponse>;
                        deposit(request: import("../cosmos/gov/v1beta1/query").QueryDepositRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryDepositResponse>;
                        deposits(request: import("../cosmos/gov/v1beta1/query").QueryDepositsRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryDepositsResponse>;
                        tallyResult(request: import("../cosmos/gov/v1beta1/query").QueryTallyResultRequest): Promise<import("../cosmos/gov/v1beta1/query").QueryTallyResultResponse>;
                    };
                };
                group: {
                    v1: {
                        groupInfo(request: import("../cosmos/group/v1/query").QueryGroupInfoRequest): Promise<import("../cosmos/group/v1/query").QueryGroupInfoResponse>;
                        groupPolicyInfo(request: import("../cosmos/group/v1/query").QueryGroupPolicyInfoRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPolicyInfoResponse>;
                        groupMembers(request: import("../cosmos/group/v1/query").QueryGroupMembersRequest): Promise<import("../cosmos/group/v1/query").QueryGroupMembersResponse>;
                        groupsByAdmin(request: import("../cosmos/group/v1/query").QueryGroupsByAdminRequest): Promise<import("../cosmos/group/v1/query").QueryGroupsByAdminResponse>;
                        groupPoliciesByGroup(request: import("../cosmos/group/v1/query").QueryGroupPoliciesByGroupRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPoliciesByGroupResponse>;
                        groupPoliciesByAdmin(request: import("../cosmos/group/v1/query").QueryGroupPoliciesByAdminRequest): Promise<import("../cosmos/group/v1/query").QueryGroupPoliciesByAdminResponse>;
                        proposal(request: import("../cosmos/group/v1/query").QueryProposalRequest): Promise<import("../cosmos/group/v1/query").QueryProposalResponse>;
                        proposalsByGroupPolicy(request: import("../cosmos/group/v1/query").QueryProposalsByGroupPolicyRequest): Promise<import("../cosmos/group/v1/query").QueryProposalsByGroupPolicyResponse>;
                        voteByProposalVoter(request: import("../cosmos/group/v1/query").QueryVoteByProposalVoterRequest): Promise<import("../cosmos/group/v1/query").QueryVoteByProposalVoterResponse>;
                        votesByProposal(request: import("../cosmos/group/v1/query").QueryVotesByProposalRequest): Promise<import("../cosmos/group/v1/query").QueryVotesByProposalResponse>;
                        votesByVoter(request: import("../cosmos/group/v1/query").QueryVotesByVoterRequest): Promise<import("../cosmos/group/v1/query").QueryVotesByVoterResponse>;
                        groupsByMember(request: import("../cosmos/group/v1/query").QueryGroupsByMemberRequest): Promise<import("../cosmos/group/v1/query").QueryGroupsByMemberResponse>;
                        tallyResult(request: import("../cosmos/group/v1/query").QueryTallyResultRequest): Promise<import("../cosmos/group/v1/query").QueryTallyResultResponse>;
                    };
                };
                mint: {
                    v1beta1: {
                        params(request?: import("../cosmos/mint/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryParamsResponse>;
                        inflation(request?: import("../cosmos/mint/v1beta1/query").QueryInflationRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryInflationResponse>;
                        annualProvisions(request?: import("../cosmos/mint/v1beta1/query").QueryAnnualProvisionsRequest): Promise<import("../cosmos/mint/v1beta1/query").QueryAnnualProvisionsResponse>;
                    };
                };
                params: {
                    v1beta1: {
                        params(request: import("../cosmos/params/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/params/v1beta1/query").QueryParamsResponse>;
                        subspaces(request?: import("../cosmos/params/v1beta1/query").QuerySubspacesRequest): Promise<import("../cosmos/params/v1beta1/query").QuerySubspacesResponse>;
                    };
                };
                staking: {
                    v1beta1: {
                        validators(request: import("../cosmos/staking/v1beta1/query").QueryValidatorsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorsResponse>;
                        validator(request: import("../cosmos/staking/v1beta1/query").QueryValidatorRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorResponse>;
                        validatorDelegations(request: import("../cosmos/staking/v1beta1/query").QueryValidatorDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorDelegationsResponse>;
                        validatorUnbondingDelegations(request: import("../cosmos/staking/v1beta1/query").QueryValidatorUnbondingDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryValidatorUnbondingDelegationsResponse>;
                        delegation(request: import("../cosmos/staking/v1beta1/query").QueryDelegationRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegationResponse>;
                        unbondingDelegation(request: import("../cosmos/staking/v1beta1/query").QueryUnbondingDelegationRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryUnbondingDelegationResponse>;
                        delegatorDelegations(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorDelegationsResponse>;
                        delegatorUnbondingDelegations(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorUnbondingDelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorUnbondingDelegationsResponse>;
                        redelegations(request: import("../cosmos/staking/v1beta1/query").QueryRedelegationsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryRedelegationsResponse>;
                        delegatorValidators(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorsResponse>;
                        delegatorValidator(request: import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryDelegatorValidatorResponse>;
                        historicalInfo(request: import("../cosmos/staking/v1beta1/query").QueryHistoricalInfoRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryHistoricalInfoResponse>;
                        pool(request?: import("../cosmos/staking/v1beta1/query").QueryPoolRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryPoolResponse>;
                        params(request?: import("../cosmos/staking/v1beta1/query").QueryParamsRequest): Promise<import("../cosmos/staking/v1beta1/query").QueryParamsResponse>;
                    };
                };
                tx: {
                    v1beta1: {
                        simulate(request: import("../cosmos/tx/v1beta1/service").SimulateRequest): Promise<import("../cosmos/tx/v1beta1/service").SimulateResponse>;
                        getTx(request: import("../cosmos/tx/v1beta1/service").GetTxRequest): Promise<import("../cosmos/tx/v1beta1/service").GetTxResponse>;
                        broadcastTx(request: import("../cosmos/tx/v1beta1/service").BroadcastTxRequest): Promise<import("../cosmos/tx/v1beta1/service").BroadcastTxResponse>;
                        getTxsEvent(request: import("../cosmos/tx/v1beta1/service").GetTxsEventRequest): Promise<import("../cosmos/tx/v1beta1/service").GetTxsEventResponse>;
                        getBlockWithTxs(request: import("../cosmos/tx/v1beta1/service").GetBlockWithTxsRequest): Promise<import("../cosmos/tx/v1beta1/service").GetBlockWithTxsResponse>;
                    };
                };
                upgrade: {
                    v1beta1: {
                        currentPlan(request?: import("../cosmos/upgrade/v1beta1/query").QueryCurrentPlanRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryCurrentPlanResponse>;
                        appliedPlan(request: import("../cosmos/upgrade/v1beta1/query").QueryAppliedPlanRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryAppliedPlanResponse>;
                        upgradedConsensusState(request: import("../cosmos/upgrade/v1beta1/query").QueryUpgradedConsensusStateRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryUpgradedConsensusStateResponse>;
                        moduleVersions(request: import("../cosmos/upgrade/v1beta1/query").QueryModuleVersionsRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryModuleVersionsResponse>;
                        authority(request?: import("../cosmos/upgrade/v1beta1/query").QueryAuthorityRequest): Promise<import("../cosmos/upgrade/v1beta1/query").QueryAuthorityResponse>;
                    };
                };
            };
            Victor118: {
                liquidity: {
                    v1beta1: {
                        liquidityPools(request?: _113.QueryLiquidityPoolsRequest): Promise<_113.QueryLiquidityPoolsResponse>;
                        liquidityPool(request: _113.QueryLiquidityPoolRequest): Promise<_113.QueryLiquidityPoolResponse>;
                        liquidityPoolByPoolCoinDenom(request: _113.QueryLiquidityPoolByPoolCoinDenomRequest): Promise<_113.QueryLiquidityPoolResponse>;
                        liquidityPoolByReserveAcc(request: _113.QueryLiquidityPoolByReserveAccRequest): Promise<_113.QueryLiquidityPoolResponse>;
                        liquidityPoolBatch(request: _113.QueryLiquidityPoolBatchRequest): Promise<_113.QueryLiquidityPoolBatchResponse>;
                        poolBatchSwapMsgs(request: _113.QueryPoolBatchSwapMsgsRequest): Promise<_113.QueryPoolBatchSwapMsgsResponse>;
                        poolBatchSwapMsg(request: _113.QueryPoolBatchSwapMsgRequest): Promise<_113.QueryPoolBatchSwapMsgResponse>;
                        poolBatchDepositMsgs(request: _113.QueryPoolBatchDepositMsgsRequest): Promise<_113.QueryPoolBatchDepositMsgsResponse>;
                        poolBatchDepositMsg(request: _113.QueryPoolBatchDepositMsgRequest): Promise<_113.QueryPoolBatchDepositMsgResponse>;
                        poolBatchWithdrawMsgs(request: _113.QueryPoolBatchWithdrawMsgsRequest): Promise<_113.QueryPoolBatchWithdrawMsgsResponse>;
                        poolBatchWithdrawMsg(request: _113.QueryPoolBatchWithdrawMsgRequest): Promise<_113.QueryPoolBatchWithdrawMsgResponse>;
                        params(request?: _113.QueryParamsRequest): Promise<_113.QueryParamsResponse>;
                    };
                };
            };
        }>;
        createLCDClient: ({ restEndpoint }: {
            restEndpoint: string;
        }) => Promise<{
            cosmos: {
                auth: {
                    v1beta1: import("../cosmos/auth/v1beta1/query.lcd").LCDQueryClient;
                };
                authz: {
                    v1beta1: import("../cosmos/authz/v1beta1/query.lcd").LCDQueryClient;
                };
                bank: {
                    v1beta1: import("../cosmos/bank/v1beta1/query.lcd").LCDQueryClient;
                };
                distribution: {
                    v1beta1: import("../cosmos/distribution/v1beta1/query.lcd").LCDQueryClient;
                };
                feegrant: {
                    v1beta1: import("../cosmos/feegrant/v1beta1/query.lcd").LCDQueryClient;
                };
                gov: {
                    v1: import("../cosmos/gov/v1/query.lcd").LCDQueryClient;
                    v1beta1: import("../cosmos/gov/v1beta1/query.lcd").LCDQueryClient;
                };
                group: {
                    v1: import("../cosmos/group/v1/query.lcd").LCDQueryClient;
                };
                mint: {
                    v1beta1: import("../cosmos/mint/v1beta1/query.lcd").LCDQueryClient;
                };
                params: {
                    v1beta1: import("../cosmos/params/v1beta1/query.lcd").LCDQueryClient;
                };
                staking: {
                    v1beta1: import("../cosmos/staking/v1beta1/query.lcd").LCDQueryClient;
                };
                tx: {
                    v1beta1: import("../cosmos/tx/v1beta1/service.lcd").LCDQueryClient;
                };
                upgrade: {
                    v1beta1: import("../cosmos/upgrade/v1beta1/query.lcd").LCDQueryClient;
                };
            };
            Victor118: {
                liquidity: {
                    v1beta1: _198.LCDQueryClient;
                };
            };
        }>;
    };
}
