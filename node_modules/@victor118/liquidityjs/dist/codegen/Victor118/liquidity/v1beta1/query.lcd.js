"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDQueryClient = void 0;
const helpers_1 = require("../../../helpers");
class LCDQueryClient {
    req;
    constructor({ requestClient }) {
        this.req = requestClient;
        this.liquidityPools = this.liquidityPools.bind(this);
        this.liquidityPool = this.liquidityPool.bind(this);
        this.liquidityPoolByPoolCoinDenom = this.liquidityPoolByPoolCoinDenom.bind(this);
        this.liquidityPoolByReserveAcc = this.liquidityPoolByReserveAcc.bind(this);
        this.liquidityPoolBatch = this.liquidityPoolBatch.bind(this);
        this.poolBatchSwapMsgs = this.poolBatchSwapMsgs.bind(this);
        this.poolBatchSwapMsg = this.poolBatchSwapMsg.bind(this);
        this.poolBatchDepositMsgs = this.poolBatchDepositMsgs.bind(this);
        this.poolBatchDepositMsg = this.poolBatchDepositMsg.bind(this);
        this.poolBatchWithdrawMsgs = this.poolBatchWithdrawMsgs.bind(this);
        this.poolBatchWithdrawMsg = this.poolBatchWithdrawMsg.bind(this);
        this.params = this.params.bind(this);
    }
    /* Get existing liquidity pools. */
    async liquidityPools(params = {
        pagination: undefined
    }) {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/liquidity/v1beta1/pools`;
        return await this.req.get(endpoint, options);
    }
    /* Get specific liquidity pool. */
    async liquidityPool(params) {
        const endpoint = `cosmos/liquidity/v1beta1/pools/${params.poolId}`;
        return await this.req.get(endpoint);
    }
    /* Get specific liquidity pool corresponding to the pool_coin_denom. */
    async liquidityPoolByPoolCoinDenom(params) {
        const endpoint = `cosmos/liquidity/v1beta1/pools/pool_coin_denom/${params.poolCoinDenom}`;
        return await this.req.get(endpoint);
    }
    /* Get specific liquidity pool corresponding to the reserve account. */
    async liquidityPoolByReserveAcc(params) {
        const endpoint = `cosmos/liquidity/v1beta1/pools/reserve_acc/${params.reserveAcc}`;
        return await this.req.get(endpoint);
    }
    /* Get the pool's current batch. */
    async liquidityPoolBatch(params) {
        const endpoint = `cosmos/liquidity/v1beta1/pools/${params.poolId}/batch`;
        return await this.req.get(endpoint);
    }
    /* Get all swap messages in the pool's current batch. */
    async poolBatchSwapMsgs(params) {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/liquidity/v1beta1/pools/${params.poolId}/batch/swaps`;
        return await this.req.get(endpoint, options);
    }
    /* Get a specific swap message in the pool's current batch. */
    async poolBatchSwapMsg(params) {
        const endpoint = `cosmos/liquidity/v1beta1/pools/${params.poolId}/batch/swaps/${params.msgIndex}`;
        return await this.req.get(endpoint);
    }
    /* Get all deposit messages in the pool's current batch. */
    async poolBatchDepositMsgs(params) {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/liquidity/v1beta1/pools/${params.poolId}/batch/deposits`;
        return await this.req.get(endpoint, options);
    }
    /* Get a specific deposit message in the pool's current batch. */
    async poolBatchDepositMsg(params) {
        const endpoint = `cosmos/liquidity/v1beta1/pools/${params.poolId}/batch/deposits/${params.msgIndex}`;
        return await this.req.get(endpoint);
    }
    /* Get all withdraw messages in the pool's current batch. */
    async poolBatchWithdrawMsgs(params) {
        const options = {
            params: {}
        };
        if (typeof params?.pagination !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/liquidity/v1beta1/pools/${params.poolId}/batch/withdraws`;
        return await this.req.get(endpoint, options);
    }
    /* Get a specific withdraw message in the pool's current batch. */
    async poolBatchWithdrawMsg(params) {
        const endpoint = `cosmos/liquidity/v1beta1/pools/${params.poolId}/batch/withdraws/${params.msgIndex}`;
        return await this.req.get(endpoint);
    }
    /* Get all parameters of the liquidity module. */
    async params(_params = {}) {
        const endpoint = `cosmos/liquidity/v1beta1/params`;
        return await this.req.get(endpoint);
    }
}
exports.LCDQueryClient = LCDQueryClient;
//# sourceMappingURL=query.lcd.js.map