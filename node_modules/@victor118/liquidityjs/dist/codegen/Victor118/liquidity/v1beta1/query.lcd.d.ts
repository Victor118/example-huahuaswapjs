import { LCDClient } from "@cosmology/lcd";
import { QueryLiquidityPoolsRequest, QueryLiquidityPoolsResponseSDKType, QueryLiquidityPoolRequest, QueryLiquidityPoolResponseSDKType, QueryLiquidityPoolByPoolCoinDenomRequest, QueryLiquidityPoolByReserveAccRequest, QueryLiquidityPoolBatchRequest, QueryLiquidityPoolBatchResponseSDKType, QueryPoolBatchSwapMsgsRequest, QueryPoolBatchSwapMsgsResponseSDKType, QueryPoolBatchSwapMsgRequest, QueryPoolBatchSwapMsgResponseSDKType, QueryPoolBatchDepositMsgsRequest, QueryPoolBatchDepositMsgsResponseSDKType, QueryPoolBatchDepositMsgRequest, QueryPoolBatchDepositMsgResponseSDKType, QueryPoolBatchWithdrawMsgsRequest, QueryPoolBatchWithdrawMsgsResponseSDKType, QueryPoolBatchWithdrawMsgRequest, QueryPoolBatchWithdrawMsgResponseSDKType, QueryParamsRequest, QueryParamsResponseSDKType } from "./query";
export declare class LCDQueryClient {
    req: LCDClient;
    constructor({ requestClient }: {
        requestClient: LCDClient;
    });
    liquidityPools(params?: QueryLiquidityPoolsRequest): Promise<QueryLiquidityPoolsResponseSDKType>;
    liquidityPool(params: QueryLiquidityPoolRequest): Promise<QueryLiquidityPoolResponseSDKType>;
    liquidityPoolByPoolCoinDenom(params: QueryLiquidityPoolByPoolCoinDenomRequest): Promise<QueryLiquidityPoolResponseSDKType>;
    liquidityPoolByReserveAcc(params: QueryLiquidityPoolByReserveAccRequest): Promise<QueryLiquidityPoolResponseSDKType>;
    liquidityPoolBatch(params: QueryLiquidityPoolBatchRequest): Promise<QueryLiquidityPoolBatchResponseSDKType>;
    poolBatchSwapMsgs(params: QueryPoolBatchSwapMsgsRequest): Promise<QueryPoolBatchSwapMsgsResponseSDKType>;
    poolBatchSwapMsg(params: QueryPoolBatchSwapMsgRequest): Promise<QueryPoolBatchSwapMsgResponseSDKType>;
    poolBatchDepositMsgs(params: QueryPoolBatchDepositMsgsRequest): Promise<QueryPoolBatchDepositMsgsResponseSDKType>;
    poolBatchDepositMsg(params: QueryPoolBatchDepositMsgRequest): Promise<QueryPoolBatchDepositMsgResponseSDKType>;
    poolBatchWithdrawMsgs(params: QueryPoolBatchWithdrawMsgsRequest): Promise<QueryPoolBatchWithdrawMsgsResponseSDKType>;
    poolBatchWithdrawMsg(params: QueryPoolBatchWithdrawMsgRequest): Promise<QueryPoolBatchWithdrawMsgResponseSDKType>;
    params(_params?: QueryParamsRequest): Promise<QueryParamsResponseSDKType>;
}
